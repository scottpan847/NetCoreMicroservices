面向环形编程

	中间件：任何请求最外层到达，提前做些筛选过滤工作，但是中间件一般没有控制器action这些信息，不适合业务逻辑
	Filter:MVC流程，流程外处理不了（404）：IActionFilter,IResultFilter,IResourceFilter,ExeptionFilterAttribute.....
	autofac：可以深入到业务逻辑层做AOP扩展


服务端缓存--中间件缓存例子
	1 services.AddResponseCaching();
	2 app.UseResponseCaching();
	3 配合ResponseCache；

初始化客户端--服务实例
	

	从单体到分布式--微服务
	分布式：一个进程做的事儿，分成多个进程协作完成
	集群（Need高可用，伸缩性）：多个完全相同的实例共同完成一件事儿，每个实例是完全一样的，都能独立处理事儿
		-->动态伸缩需要服务管理（例如Ngnix,consul等）

	脚本启动命令：
		Asp.Net Core 客户端
		dotnet MicroService.ClientDemo.dll --urls="http://*:5177" --ip="127.0.0.1"--port=5177

		Core WebApi 服务实例
		dotnet MicroService.ServiceInstance.dll --urls="http://*:5726" --ip="127.0.0.1"--port=5726
服务管理注册与发现
	Nginx
		监听请求--转发请求--响应
		单纯是负载均衡
		缺点（可以用第三方扩展解决，但是效果不是很好，且Nginx项目一般比较重）：
			1.动态增加/减少服务实例
			2.服务的健康检查，自动下线
	consul
	zookeeper